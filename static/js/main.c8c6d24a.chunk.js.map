{"version":3,"sources":["Mapbox.js","App.js","SceneComponent.js","index.js"],"names":["mapboxgl","accessToken","cuboid","Mapbox","map","setMap","mapContainer","React","useRef","useEffect","Map","container","current","style","center","zoom","preserveDrawingBuffer","addControl","MapboxGeocoder","flyTo","speed","marker","ref","position","height","width","SceneComponent","props","reactCanvas","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","rest","onSceneReady","engine","Engine","scene","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","resize","getEngine","window","addEventListener","dispose","removeEventListener","camera","ArcRotateCamera","Math","PI","Vector3","Zero","setTarget","canvas","getRenderingCanvas","attachControl","light","HemisphericLight","groundColor","Color3","specular","Black","MeshBuilder","CreateBox","depth","App","useState","activeView","setActiveView","loading","setLoading","className","onClick","img","getCanvas","toDataURL","myMaterial","StandardMaterial","diffuseTexture","Texture","material","setTimeout","disabled","id","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8c6d24a.chunk.js","sourcesContent":["import React from \"react\"\r\nimport mapboxgl from \"!mapbox-gl\" // eslint-disable-line import/no-webpack-loader-syntax\r\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\"\r\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\"\r\n\r\nmapboxgl.accessToken = \"pk.eyJ1IjoicHJhdHZhciIsImEiOiJja2kxbmQ1b2oyanY2MnlwNWhzNGNjYjhvIn0.kYH7yt71R1HHESepho0Rhg\"\r\n\r\nconst Mapbox = ({ map, setMap }) => {\r\n\r\n  const mapContainer = React.useRef(null)\r\n\r\n  React.useEffect(() => {\r\n    setMap(new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: \"mapbox://styles/mapbox/dark-v10\",\r\n      center: [0, 30],\r\n      zoom: 0.5,\r\n      preserveDrawingBuffer: true\r\n    }))\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (map) {\r\n      map.addControl(new MapboxGeocoder({\r\n        accessToken: mapboxgl.accessToken,\r\n        flyTo: {\r\n          speed: 10,\r\n        },\r\n        marker: false,\r\n        mapboxgl: mapboxgl\r\n      }))\r\n    }\r\n  }, [map])\r\n\r\n\r\n\r\n  return (\r\n    <div ref={mapContainer} style={{ position: \"absolute\", height: \"100%\", width: \"100%\" }} />\r\n  )\r\n}\r\n\r\nexport default Mapbox","import { useState } from \"react\"\nimport \"./App.css\"\nimport Mapbox from \"./Mapbox\"\nimport { ArcRotateCamera, Vector3, HemisphericLight, MeshBuilder, StandardMaterial, Texture, Color3 } from \"@babylonjs/core\"\nimport SceneComponent from \"./SceneComponent\"\n\nlet cuboid\n\nconst onSceneReady = (scene) => {\n\n  let camera = new ArcRotateCamera(\"Camera\", Math.PI / 4, Math.PI / 4, 4, Vector3.Zero(), scene)\n  camera.setTarget(Vector3.Zero())\n  const canvas = scene.getEngine().getRenderingCanvas()\n  camera.attachControl(canvas, true)\n\n  let light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene)\n  light.groundColor = new Color3(1, 1, 1)\n  light.specular = Color3.Black()\n\n  cuboid = MeshBuilder.CreateBox(\"box\", { width: 2, height: 1.5, depth: 1.5 })\n\n}\n\nconst App = () => {\n  const [activeView, setActiveView] = useState(\"map\")\n  const [loading, setLoading] = useState(false)\n  const [map, setMap] = useState(null)\n\n  const handleClick = () => {\n    if (activeView === \"map\") {\n      setLoading(true)\n      let img = map.getCanvas().toDataURL()\n      let myMaterial = new StandardMaterial(\"myMaterial\")\n      myMaterial.diffuseTexture = new Texture(img)\n      cuboid.material = myMaterial\n      setTimeout(() => {\n        setLoading(false)\n        setActiveView(\"viewer\")\n      }, 400)\n    }\n    else setActiveView(\"map\")\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <h1>{activeView === \"map\" ? \"Select region\" : \"Here's your cuboid!\"}</h1>\n        <button onClick={handleClick} disabled={loading}>\n          {activeView === \"map\"\n            ? <><i className=\"fa fa-camera\" />Capture</>\n            : <><i className=\"fa fa-plus\" />New</>\n          }\n        </button>\n      </div>\n      <div className=\"container\">\n        <div className={`wrapper mapWrapper ${activeView === \"map\" ? \"active\" : \"\"}`}>\n          <Mapbox map={map} setMap={setMap} />\n          <div className={`loading-overlay ${loading && 'active'}`}>\n            {\n              loading\n                ? <i className=\"fas fa-cog fa-spin\" />\n                : <i className=\"fa fa-check\" />\n            }\n          </div>\n        </div>\n        <div className={`wrapper viewerWrapper ${activeView === \"viewer\" ? \"active\" : \"\"}`}>\n          <SceneComponent\n            antialias\n            onSceneReady={onSceneReady}\n            id=\"my-canvas\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { Engine, Scene } from \"@babylonjs/core\"\r\nimport React, { useEffect, useRef } from \"react\"\r\n\r\nconst SceneComponent = props => {\r\n  const reactCanvas = useRef(null)\r\n  const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props\r\n\r\n  useEffect(() => {\r\n    if (reactCanvas.current) {\r\n      const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio)\r\n      const scene = new Scene(engine, sceneOptions)\r\n      if (scene.isReady()) {\r\n        props.onSceneReady(scene)\r\n      } else {\r\n        scene.onReadyObservable.addOnce((scene) => props.onSceneReady(scene))\r\n      }\r\n\r\n      engine.runRenderLoop(() => {\r\n        if (typeof onRender === \"function\") {\r\n          onRender(scene)\r\n        }\r\n        scene.render()\r\n      })\r\n\r\n      const resize = () => {\r\n        scene.getEngine().resize()\r\n      }\r\n\r\n      if (window) {\r\n        window.addEventListener(\"resize\", resize)\r\n      }\r\n\r\n      return () => {\r\n        scene.getEngine().dispose()\r\n\r\n        if (window) {\r\n          window.removeEventListener(\"resize\", resize)\r\n        }\r\n      }\r\n    }\r\n  }, [reactCanvas])\r\n\r\n  return <canvas style={{ height: \"100%\", width: \"100%\" }} ref={reactCanvas} {...rest} />\r\n}\r\n\r\nexport default SceneComponent\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport './normalize.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}